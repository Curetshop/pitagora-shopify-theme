{%- comment -%}
Recently Viewed Products Section - Pitagora Theme
Display products that the customer has recently viewed using localStorage
{%- endcomment -%}

<style>
  #shopify-section-{{ section.id }} {
    --recently-viewed-bg: {{ section.settings.background_color | default: 'transparent' }};
    --recently-viewed-text: {{ section.settings.text_color | default: 'inherit' }};
    --columns-desktop: {{ section.settings.columns_desktop | default: 4 }};
    --columns-tablet: {{ section.settings.columns_tablet | default: 3 }};
    --columns-mobile: {{ section.settings.columns_mobile | default: 2 }};
  }
</style>

<div 
  class="recently-viewed section-padding"
  style="background: var(--recently-viewed-bg); color: var(--recently-viewed-text); display: none;"
  data-section-id="{{ section.id }}"
  data-max-products="{{ section.settings.max_products | default: 8 }}"
>
  <div class="page-width">
    {%- if section.settings.heading != blank or section.settings.subheading != blank -%}
      <div class="section-header text-center">
        {%- if section.settings.subheading != blank -%}
          <p class="section-header__subheading">{{ section.settings.subheading | escape }}</p>
        {%- endif -%}
        
        {%- if section.settings.heading != blank -%}
          <h2 class="section-header__heading h2">{{ section.settings.heading | escape }}</h2>
        {%- endif -%}
      </div>
    {%- endif -%}

    <div class="recently-viewed__wrapper">
      <div class="recently-viewed__loading" style="display: none;">
        <div class="recently-viewed__loading-spinner">
          {% render 'icon-spinner' %}
        </div>
        <p>{{ 'products.recently_viewed.loading' | t }}</p>
      </div>

      <div class="recently-viewed__grid" id="recently-viewed-grid-{{ section.id }}">
        {%- comment -%} Products will be loaded here via JavaScript {%- endcomment -%}
      </div>

      <div class="recently-viewed__empty" style="display: none;">
        <div class="recently-viewed__empty-content">
          <h3>{{ 'products.recently_viewed.no_products' | t }}</h3>
          <p>{{ 'products.recently_viewed.no_products_html' | t }}</p>
          <a href="{{ routes.all_products_collection_url }}" class="button button--primary">
            {{ 'general.continue_shopping' | t }}
          </a>
        </div>
      </div>
    </div>

    {%- if section.settings.show_clear_all -%}
      <div class="recently-viewed__clear" style="display: none;">
        <button 
          type="button" 
          class="recently-viewed__clear-button button button--outline button--small"
          onclick="clearRecentlyViewed()"
        >
          {{ section.settings.clear_all_text | default: 'Clear all' | escape }}
        </button>
      </div>
    {%- endif -%}
  </div>
</div>

<style>
  .recently-viewed__wrapper {
    margin-top: 2rem;
  }
  
  .recently-viewed__grid {
    display: grid;
    grid-template-columns: repeat(var(--columns-desktop), 1fr);
    gap: 2rem;
  }
  
  .recently-viewed__loading {
    text-align: center;
    padding: 3rem 1rem;
  }
  
  .recently-viewed__loading-spinner {
    display: inline-block;
    margin-bottom: 1rem;
    animation: spin 1s linear infinite;
  }
  
  .recently-viewed__loading-spinner svg {
    width: 2rem;
    height: 2rem;
  }
  
  .recently-viewed__empty {
    text-align: center;
    padding: 3rem 1rem;
  }
  
  .recently-viewed__empty-content h3 {
    margin-bottom: 1rem;
  }
  
  .recently-viewed__empty-content p {
    margin-bottom: 2rem;
    color: var(--color-foreground-75);
  }
  
  .recently-viewed__clear {
    text-align: center;
    margin-top: 2rem;
  }
  
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  @media screen and (max-width: 989px) {
    .recently-viewed__grid {
      grid-template-columns: repeat(var(--columns-tablet), 1fr);
      gap: 1.5rem;
    }
  }
  
  @media screen and (max-width: 749px) {
    .recently-viewed__grid {
      grid-template-columns: repeat(var(--columns-mobile), 1fr);
      gap: 1rem;
    }
  }
</style>

<script>
  class RecentlyViewedProducts extends HTMLElement {
    constructor() {
      super();
      this.section = this.closest('[data-section-id]');
      this.sectionId = this.section.dataset.sectionId;
      this.maxProducts = parseInt(this.section.dataset.maxProducts) || 8;
      this.storageKey = 'shopify-recently-viewed';
      this.currentProductId = this.getCurrentProductId();
      
      this.init();
    }

    init() {
      // Track current product if on product page
      if (this.currentProductId) {
        this.trackProduct(this.currentProductId);
      }
      
      this.loadRecentlyViewed();
    }

    getCurrentProductId() {
      if (window.location.pathname.includes('/products/')) {
        const productData = document.querySelector('#ProductJson, [data-product-json]');
        if (productData) {
          try {
            const product = JSON.parse(productData.textContent || productData.innerHTML);
            return product.id;
          } catch (e) {
            console.warn('Could not parse product JSON');
          }
        }
        
        // Fallback: try to get from meta tags
        const productIdMeta = document.querySelector('meta[property="product:id"]');
        if (productIdMeta) {
          return parseInt(productIdMeta.content);
        }
      }
      return null;
    }

    trackProduct(productId) {
      let recentlyViewed = this.getRecentlyViewed();
      
      // Remove if already exists (to move to front)
      recentlyViewed = recentlyViewed.filter(id => id !== productId);
      
      // Add to front
      recentlyViewed.unshift(productId);
      
      // Limit to max products
      if (recentlyViewed.length > this.maxProducts) {
        recentlyViewed = recentlyViewed.slice(0, this.maxProducts);
      }
      
      try {
        localStorage.setItem(this.storageKey, JSON.stringify(recentlyViewed));
      } catch (e) {
        console.warn('Could not save to localStorage');
      }
    }

    getRecentlyViewed() {
      try {
        const stored = localStorage.getItem(this.storageKey);
        return stored ? JSON.parse(stored) : [];
      } catch (e) {
        return [];
      }
    }

    async loadRecentlyViewed() {
      let recentlyViewed = this.getRecentlyViewed();
      
      // Remove current product from the list when displaying
      if (this.currentProductId) {
        recentlyViewed = recentlyViewed.filter(id => id !== this.currentProductId);
      }
      
      if (recentlyViewed.length === 0) {
        this.showEmpty();
        return;
      }

      this.showSection();
      this.showLoading();
      
      try {
        const products = await this.fetchProducts(recentlyViewed);
        this.renderProducts(products);
        this.showClearButton();
      } catch (error) {
        console.error('Error loading recently viewed products:', error);
        this.showEmpty();
      }
    }

    async fetchProducts(productIds) {
      const productPromises = productIds.map(async (id) => {
        try {
          const response = await fetch(`${window.Shopify.routes.root}products/${id}.js`);
          if (response.ok) {
            return await response.json();
          }
          return null;
        } catch (e) {
          return null;
        }
      });

      const products = await Promise.all(productPromises);
      return products.filter(product => product !== null);
    }

    renderProducts(products) {
      const grid = this.section.querySelector('#recently-viewed-grid-' + this.sectionId);
      const loading = this.section.querySelector('.recently-viewed__loading');
      
      if (products.length === 0) {
        this.showEmpty();
        return;
      }

      grid.innerHTML = products.map(product => this.renderProductCard(product)).join('');
      loading.style.display = 'none';
      grid.style.display = 'grid';
    }

    renderProductCard(product) {
      const image = product.featured_image;
      const price = this.formatMoney(product.price);
      const comparePrice = product.compare_at_price > product.price 
        ? this.formatMoney(product.compare_at_price) 
        : '';

      return `
        <div class="recently-viewed__product-card">
          <div class="recently-viewed__product-image">
            <a href="${product.url}" class="recently-viewed__product-link">
              ${image ? `
                <img
                  src="${image.replace('.jpg', '_300x300.jpg').replace('.png', '_300x300.png')}"
                  alt="${product.title}"
                  loading="lazy"
                  width="300"
                  height="300"
                />
              ` : `
                <div class="recently-viewed__product-placeholder">
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                    <circle cx="8.5" cy="8.5" r="1.5"/>
                    <polyline points="21,15 16,10 5,21"/>
                  </svg>
                </div>
              `}
            </a>
          </div>
          <div class="recently-viewed__product-info">
            <h3 class="recently-viewed__product-title">
              <a href="${product.url}" class="recently-viewed__product-link">
                ${product.title}
              </a>
            </h3>
            <div class="recently-viewed__product-price">
              ${comparePrice ? `
                <span class="recently-viewed__product-price-compare">${comparePrice}</span>
              ` : ''}
              <span class="recently-viewed__product-price-current">${price}</span>
            </div>
          </div>
        </div>
      `;
    }

    formatMoney(cents) {
      const format = window.Shopify?.theme?.moneyFormat || '${{amount}}';
      const amount = (cents / 100).toFixed(2);
      return format.replace('{{amount}}', amount);
    }

    showSection() {
      this.section.style.display = 'block';
    }

    showLoading() {
      const loading = this.section.querySelector('.recently-viewed__loading');
      const grid = this.section.querySelector('#recently-viewed-grid-' + this.sectionId);
      const empty = this.section.querySelector('.recently-viewed__empty');
      
      loading.style.display = 'block';
      grid.style.display = 'none';
      empty.style.display = 'none';
    }

    showEmpty() {
      const loading = this.section.querySelector('.recently-viewed__loading');
      const grid = this.section.querySelector('#recently-viewed-grid-' + this.sectionId);
      const empty = this.section.querySelector('.recently-viewed__empty');
      
      loading.style.display = 'none';
      grid.style.display = 'none';
      empty.style.display = 'block';
      this.section.style.display = 'block';
    }

    showClearButton() {
      const clearButton = this.section.querySelector('.recently-viewed__clear');
      if (clearButton) {
        clearButton.style.display = 'block';
      }
    }
  }

  // Global function for clear button
  function clearRecentlyViewed() {
    try {
      localStorage.removeItem('shopify-recently-viewed');
      const section = document.querySelector('[data-section-id="{{ section.id }}"]');
      if (section) {
        section.style.display = 'none';
      }
    } catch (e) {
      console.warn('Could not clear recently viewed products');
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new RecentlyViewedProducts();
    });
  } else {
    new RecentlyViewedProducts();
  }
</script>

<style>
  .recently-viewed__product-card {
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    overflow: hidden;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  .recently-viewed__product-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .recently-viewed__product-image {
    aspect-ratio: 1;
    overflow: hidden;
    position: relative;
  }
  
  .recently-viewed__product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .recently-viewed__product-image:hover img {
    transform: scale(1.05);
  }
  
  .recently-viewed__product-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--color-background-secondary);
    color: var(--color-foreground-25);
  }
  
  .recently-viewed__product-placeholder svg {
    width: 3rem;
    height: 3rem;
  }
  
  .recently-viewed__product-info {
    padding: 1rem;
  }
  
  .recently-viewed__product-title {
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    line-height: 1.4;
  }
  
  .recently-viewed__product-link {
    text-decoration: none;
    color: inherit;
  }
  
  .recently-viewed__product-link:hover {
    color: var(--color-link);
  }
  
  .recently-viewed__product-price {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .recently-viewed__product-price-compare {
    font-size: 0.875rem;
    color: var(--color-foreground-75);
    text-decoration: line-through;
  }
  
  .recently-viewed__product-price-current {
    font-size: 1rem;
    font-weight: 600;
    color: var(--color-price);
  }
</style>

{% schema %}
{
  "name": "Recently viewed products",
  "class": "shopify-section-recently-viewed",
  "tag": "section",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Recently viewed"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading"
    },
    {
      "type": "header",
      "content": "Settings"
    },
    {
      "type": "range",
      "id": "max_products",
      "label": "Maximum products to show",
      "min": 2,
      "max": 12,
      "step": 1,
      "default": 8
    },
    {
      "type": "checkbox",
      "id": "show_clear_all",
      "label": "Show clear all button",
      "default": true
    },
    {
      "type": "text",
      "id": "clear_all_text",
      "label": "Clear all button text",
      "default": "Clear all"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "label": "Desktop columns",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4
    },
    {
      "type": "range",
      "id": "columns_tablet",
      "label": "Tablet columns",
      "min": 1,
      "max": 4,
      "step": 1,
      "default": 3
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Mobile columns",
      "options": [
        {
          "value": "1",
          "label": "1 column"
        },
        {
          "value": "2",
          "label": "2 columns"
        }
      ],
      "default": "2"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color"
    }
  ],
  "presets": [
    {
      "name": "Recently viewed products",
      "settings": {
        "heading": "Recently viewed",
        "max_products": 8,
        "show_clear_all": true
      }
    }
  ]
}
{% endschema %}