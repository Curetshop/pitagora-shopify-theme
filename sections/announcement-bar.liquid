{%- comment -%}
Announcement Bar Section - Pitagora Theme
Sticky announcement bar with message and optional close button
{%- endcomment -%}

{%- if section.settings.message != blank -%}
  <style>
    #shopify-section-{{ section.id }} {
      --announcement-bg: {{ section.settings.background_color | default: '#1f2937' }};
      --announcement-text: {{ section.settings.text_color | default: '#ffffff' }};
      --announcement-link: {{ section.settings.link_color | default: '#60a5fa' }};
    }
  </style>

  <announcement-bar 
    class="announcement-bar" 
    data-section-id="{{ section.id }}"
    {% if section.settings.auto_rotate and section.blocks.size > 1 %}data-auto-rotate="{{ section.settings.auto_rotate_speed }}"{% endif %}
    style="background-color: var(--announcement-bg); color: var(--announcement-text);"
  >
    <div class="announcement-bar__content">
      {%- if section.blocks.size > 0 -%}
        {%- for block in section.blocks -%}
          <div 
            class="announcement-bar__message{% if forloop.first %} announcement-bar__message--active{% endif %}" 
            data-block-id="{{ block.id }}"
            {{ block.shopify_attributes }}
          >
            {%- if block.settings.link != blank -%}
              <a href="{{ block.settings.link }}" class="announcement-bar__link" style="color: var(--announcement-link);">
                {{ block.settings.message | escape }}
              </a>
            {%- else -%}
              <span class="announcement-bar__text">{{ block.settings.message | escape }}</span>
            {%- endif -%}
          </div>
        {%- endfor -%}
      {%- else -%}
        <div class="announcement-bar__message announcement-bar__message--active">
          {%- if section.settings.link != blank -%}
            <a href="{{ section.settings.link }}" class="announcement-bar__link" style="color: var(--announcement-link);">
              {{ section.settings.message | escape }}
            </a>
          {%- else -%}
            <span class="announcement-bar__text">{{ section.settings.message | escape }}</span>
          {%- endif -%}
        </div>
      {%- endif -%}

      {%- if section.blocks.size > 1 -%}
        <div class="announcement-bar__controls">
          <button 
            class="announcement-bar__nav announcement-bar__nav--prev" 
            type="button" 
            aria-label="Previous announcement"
          >
            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
              <path d="M10.5 3L5.5 8l5 5" stroke="currentColor" stroke-width="1.5" fill="none"/>
            </svg>
          </button>
          <button 
            class="announcement-bar__nav announcement-bar__nav--next" 
            type="button" 
            aria-label="Next announcement"
          >
            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
              <path d="M5.5 3l5 5-5 5" stroke="currentColor" stroke-width="1.5" fill="none"/>
            </svg>
          </button>
        </div>
      {%- endif -%}

      {%- if section.settings.show_close_button -%}
        <button 
          class="announcement-bar__close" 
          type="button"
          aria-label="{{ 'accessibility.close' | t }}"
          data-close-announcement
        >
          {%- render 'icon-close' -%}
        </button>
      {%- endif -%}
    </div>
  </announcement-bar>

  <style>
    .announcement-bar {
      position: relative;
      z-index: 100;
      padding: 0.75rem 0;
      text-align: center;
      font-size: 0.875rem;
      line-height: 1.4;
      font-weight: 500;
    }

    .announcement-bar[data-sticky="true"] {
      position: sticky;
      top: 0;
    }

    .announcement-bar__content {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
      gap: 1rem;
    }

    .announcement-bar__message {
      display: none;
      flex: 1;
      text-align: center;
    }

    .announcement-bar__message--active {
      display: block;
    }

    .announcement-bar__link {
      color: inherit;
      text-decoration: none;
      transition: opacity 0.2s ease;
    }

    .announcement-bar__link:hover {
      opacity: 0.8;
      text-decoration: underline;
    }

    .announcement-bar__text {
      display: block;
    }

    .announcement-bar__controls {
      display: flex;
      gap: 0.5rem;
      position: absolute;
      right: 4rem;
    }

    .announcement-bar__nav {
      background: transparent;
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      width: 2rem;
      height: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
      color: inherit;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .announcement-bar__nav:hover {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.5);
    }

    .announcement-bar__close {
      background: transparent;
      border: none;
      color: inherit;
      cursor: pointer;
      padding: 0.25rem;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      width: 2rem;
      height: 2rem;
      transition: all 0.2s ease;
      position: absolute;
      right: 1rem;
    }

    .announcement-bar__close:hover {
      background: rgba(255, 255, 255, 0.1);
    }

    .announcement-bar__close svg {
      width: 1rem;
      height: 1rem;
    }

    /* Mobile adjustments */
    @media screen and (max-width: 749px) {
      .announcement-bar {
        padding: 1rem 0;
        font-size: 0.8125rem;
      }

      .announcement-bar__content {
        padding: 0 3rem;
      }

      .announcement-bar__controls {
        display: none;
      }

      .announcement-bar__close {
        position: static;
        margin-left: auto;
        flex-shrink: 0;
      }
    }
  </style>

  <script>
    class AnnouncementBar extends HTMLElement {
      constructor() {
        super();
        this.messages = this.querySelectorAll('.announcement-bar__message');
        this.currentIndex = 0;
        this.autoRotate = this.dataset.autoRotate;
        this.rotateInterval = null;
        
        this.closeButton = this.querySelector('[data-close-announcement]');
        this.prevButton = this.querySelector('.announcement-bar__nav--prev');
        this.nextButton = this.querySelector('.announcement-bar__nav--next');
        
        this.init();
      }

      init() {
        // Close button functionality
        if (this.closeButton) {
          this.closeButton.addEventListener('click', () => this.close());
        }

        // Navigation functionality
        if (this.prevButton && this.nextButton && this.messages.length > 1) {
          this.prevButton.addEventListener('click', () => this.showPrevious());
          this.nextButton.addEventListener('click', () => this.showNext());
        }

        // Auto-rotate functionality
        if (this.autoRotate && this.messages.length > 1) {
          this.startAutoRotate();
          
          // Pause on hover
          this.addEventListener('mouseenter', () => this.pauseAutoRotate());
          this.addEventListener('mouseleave', () => this.resumeAutoRotate());
        }

        // Check if previously closed
        const sectionId = this.dataset.sectionId;
        const isClosed = localStorage.getItem(`announcement-bar-${sectionId}-closed`);
        if (isClosed) {
          this.style.display = 'none';
        }
      }

      showMessage(index) {
        this.messages.forEach((message, i) => {
          message.classList.toggle('announcement-bar__message--active', i === index);
        });
        this.currentIndex = index;
      }

      showNext() {
        const nextIndex = (this.currentIndex + 1) % this.messages.length;
        this.showMessage(nextIndex);
      }

      showPrevious() {
        const prevIndex = (this.currentIndex - 1 + this.messages.length) % this.messages.length;
        this.showMessage(prevIndex);
      }

      startAutoRotate() {
        const interval = parseInt(this.autoRotate) * 1000 || 5000;
        this.rotateInterval = setInterval(() => {
          this.showNext();
        }, interval);
      }

      pauseAutoRotate() {
        if (this.rotateInterval) {
          clearInterval(this.rotateInterval);
          this.rotateInterval = null;
        }
      }

      resumeAutoRotate() {
        if (this.autoRotate && this.messages.length > 1) {
          this.startAutoRotate();
        }
      }

      close() {
        this.style.display = 'none';
        
        // Remember that it was closed
        const sectionId = this.dataset.sectionId;
        localStorage.setItem(`announcement-bar-${sectionId}-closed`, 'true');
      }

      disconnectedCallback() {
        this.pauseAutoRotate();
      }
    }

    customElements.define('announcement-bar', AnnouncementBar);
  </script>
{%- endif -%}

{% schema %}
{
  "name": "Announcement bar",
  "class": "shopify-section-announcement-bar",
  "tag": "header",
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "message",
      "label": "Message",
      "default": "Free shipping on orders over $75"
    },
    {
      "type": "url",
      "id": "link",
      "label": "Link"
    },
    {
      "type": "header",
      "content": "Display settings"
    },
    {
      "type": "checkbox",
      "id": "show_close_button",
      "label": "Show close button",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "sticky",
      "label": "Sticky position",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "auto_rotate",
      "label": "Auto-rotate messages",
      "default": false,
      "info": "Only applies when multiple announcement blocks are added"
    },
    {
      "type": "range",
      "id": "auto_rotate_speed",
      "label": "Auto-rotate speed",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "default": 5
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#1f2937"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "link_color",
      "label": "Link color",
      "default": "#60a5fa"
    }
  ],
  "blocks": [
    {
      "type": "announcement",
      "name": "Announcement",
      "settings": [
        {
          "type": "text",
          "id": "message",
          "label": "Message",
          "default": "Free shipping on orders over $75"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Announcement bar",
      "settings": {
        "message": "Free shipping on orders over $75",
        "show_close_button": true
      }
    }
  ]
}
{% endschema %}